import matplotlib.pyplot as plt

def testHeuristics():
  IDATSP = [0.002197742462158203, 0.01010584831237793, 0.46287965774536133, 0.0211639404296875, 0.9813580513000488, 0.022231340408325195, 0.7101058959960938, 0.1620650291442871, 0.24128484725952148, 0.7082805633544922, 0.05112433433532715, 6.833448886871338, 2.657580614089966, 0.15343761444091797, 9999, 57.283202171325684, 37.30687737464905, 20.504920482635498, 94.20578503608704, 108.74389362335205, 9999, 37.67170572280884, 9999, 44.45972156524658, 12.646326780319214, 6.305060625076294, 87.35264301300049, 9999, 83.2565643787384, 0.05446767807006836, 0.7314677238464355, 28.327734231948853, 62.29089283943176, 9999, 45.39349603652954]
  IDAmindist = [0.021959304809570312, 0.019176959991455078, 0.8647358417510986, 0.10766005516052246, 7.3392274379730225, 0.33994436264038086, 4.068277835845947, 0.3445918560028076, 0.6688134670257568, 3.210219383239746, 0.061817169189453125, 21.807208776474, 196.92816638946533, 4.888306379318237, 9999, 146.80008101463318, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 204.97943949699402, 188.72497963905334, 11.824146032333374, 9999, 9999, 9999, 5.565653324127197, 3.2379531860351562, 9999, 9999, 9999, 9999]  
  IDAtotaldist = [0.0037276744842529297, 0.01744389533996582, 0.85158371925354, 0.042011260986328125, 0.4280540943145752, 0.0338437557220459, 1.9049088954925537, 0.2595341205596924, 0.419492244720459, 1.5060536861419678, 0.10125994682312012, 13.104248046875, 6.894232511520386, 0.032857418060302734, 9999, 123.85943531990051, 89.65843462944031, 60.987719774246216, 282.23335695266724, 230.4717161655426, 9999, 218.31780791282654, 9999, 71.70087242126465, 16.58450484275818, 13.105665922164917, 40.552891969680786, 0.5749855041503906, 2.4155538082122803, 0.1235496997833252, 0.9754366874694824, 106.32399892807007, 41.993536949157715, 9999, 74.72015428543091]
  #IDATSPwithcrate = [0.002682209014892578, 0.012578964233398438, 0.4126765727996826, 0.014626502990722656, 0.8134946823120117, 0.009934186935424805, 0.5859320163726807, 0.1685929298400879, 0.13422346115112305, 0.6057994365692139, 0.04239654541015625, 6.432904243469238, 2.9023427963256836, 0.1134648323059082, 9999, 50.06967115402222, 43.90847730636597, 15.612824440002441, 5.1686272621154785, 98.91770434379578, 9999, 56.40587067604065, 9999, 32.66276788711548, 14.101946830749512, 0.1319282054901123, 144.09261298179626, 9999, 9999, 0.3013427257537842, 1.3359119892120361, 43.12896394729614, 132.76579475402832, 9999, 69.02494239807129]

  #Filter out the levels that did not complete (time is 9999)
  #Sort the levels in order to get a usual line graph
  completedTimesIDATSP = sorted([time for time in IDATSP if time != 9999])
  levelsSolvedIDATSP = range(1, len(completedTimesIDATSP) + 1)

  completedTimesIDAmindist = sorted([time for time in IDAmindist if time != 9999])
  levelsSolvedIDAmindist = range(1, len(completedTimesIDAmindist) + 1)

  completedTimesIDAtotaldist = sorted([time for time in IDAtotaldist if time != 9999])
  levelsSolvedIDAtotaldist = range(1, len(completedTimesIDAtotaldist) + 1)

  #completedTimesIDATSPwithcrate = sorted([time for time in IDATSPwithcrate if time != 9999])
  #levelsSolvedIDATSPwithcrate = range(1, len(completedTimesIDATSPwithcrate) + 1)

  #Create the line graphs
  plt.figure(figsize=(10, 6))
  #plt.plot(completedTimesIDATSPwithcrate, levelsSolvedIDATSPwithcrate, marker='o', linestyle='-', label='TSP with crate dropping')
  plt.plot(completedTimesIDATSP, levelsSolvedIDATSP, marker='o', linestyle='-', label='TSP')
  plt.plot(completedTimesIDAmindist, levelsSolvedIDAmindist, marker='o', linestyle='-', label='Minimum Distance')
  plt.plot(completedTimesIDAtotaldist, levelsSolvedIDAtotaldist, marker='o', linestyle='-', label='Total Distance')

  #Add labels and title
  plt.xlabel("Time Taken to Complete Level (seconds)")
  plt.ylabel("Total Number of Levels Solved")
  plt.title("Levels Solved Over Time")
  plt.grid(True)

  #Displays line graph names
  plt.legend()

  #Show the plot
  plt.tight_layout()
  plt.show()

def testLimitedTSP():
  IDATSP = [0.002197742462158203, 0.01010584831237793, 0.46287965774536133, 0.0211639404296875, 0.9813580513000488, 0.022231340408325195, 0.7101058959960938, 0.1620650291442871, 0.24128484725952148, 0.7082805633544922, 0.05112433433532715, 6.833448886871338, 2.657580614089966, 0.15343761444091797, 9999, 57.283202171325684, 37.30687737464905, 20.504920482635498, 94.20578503608704, 108.74389362335205, 9999, 37.67170572280884, 9999, 44.45972156524658, 12.646326780319214, 6.305060625076294, 87.35264301300049, 9999, 83.2565643787384, 0.05446767807006836, 0.7314677238464355, 28.327734231948853, 62.29089283943176, 9999, 45.39349603652954]
  IDATSPlimited = [0.0021233558654785156, 0.009489059448242188, 0.4247782230377197, 0.0218813419342041, 0.9437024593353271, 0.02002429962158203, 0.6360485553741455, 0.147932767868042, 0.21949052810668945, 0.6617085933685303, 0.05114936828613281, 6.50253701210022, 2.663037061691284, 0.17992496490478516, 9999, 55.054654359817505, 35.344709396362305, 20.046316146850586, 90.40803527832031, 102.26901769638062, 9999, 35.96007299423218, 9999, 109.47794556617737, 31.806662797927856, 15.449579954147339, 220.22429299354553, 9999, 83.2565643787384, 0.15857696533203125, 1.8249478340148926, 70.03847002983093, 151.02112483978271, 9999, 109.19739031791687]

  #Filter out the levels that did not complete (time is 9999)
  #Sort the levels in order to get a usual line graph
  completedTimesIDATSP = sorted([time for time in IDATSP if time != 9999])
  levelsSolvedIDATSP = range(1, len(completedTimesIDATSP) + 1)

  completedTimesIDATSPlimited = sorted([time for time in IDATSPlimited if time != 9999])
  levelsSolvedIDATSPlimited = range(1, len(completedTimesIDATSPlimited) + 1)

  #Create the line graphs
  plt.figure(figsize=(10, 6))
  plt.plot(completedTimesIDATSP, levelsSolvedIDATSP, marker='o', linestyle='-', label='TSP')
  plt.plot(completedTimesIDATSPlimited, levelsSolvedIDATSPlimited, marker='s', linestyle='-', label='Limited Helmet TSP')

  #Add labels and title
  plt.xlabel("Time Taken to Complete Level (seconds)")
  plt.ylabel("Total Number of Levels Solved")
  plt.title("Levels Solved Over Time")
  plt.grid(True)

  #Displays line graph names
  plt.legend()

  #Show the plot
  plt.tight_layout()
  plt.show()


def testModel():
  IDA = [0.002197742462158203, 0.01010584831237793, 0.46287965774536133, 0.0211639404296875, 0.9813580513000488, 0.022231340408325195, 0.7101058959960938, 0.1620650291442871, 0.24128484725952148, 0.7082805633544922, 0.05112433433532715, 6.833448886871338, 2.657580614089966, 0.15343761444091797, 9999, 57.283202171325684, 37.30687737464905, 20.504920482635498, 94.20578503608704, 108.74389362335205, 9999, 37.67170572280884, 9999, 44.45972156524658, 12.646326780319214, 6.305060625076294, 87.35264301300049, 9999, 83.2565643787384, 0.05446767807006836, 0.7314677238464355, 28.327734231948853, 62.29089283943176, 9999, 45.39349603652954]
  AStar = [0.002609729766845703, 0.0056781768798828125, 0.041658878326416016, 0.009636878967285156, 0.0993802547454834, 0.008656024932861328, 0.0966799259185791, 0.016457796096801758, 0.02806401252746582, 0.12271380424499512, 0.009359359741210938, 0.3174769878387451, 0.3611128330230713, 0.03519082069396973, 14.957660913467407, 2.426610231399536, 3.839820384979248, 9.042973279953003, 10.619529485702515, 16.584935903549194, 239.80674958229065, 3.7623672485351562, 35.62586522102356, 2.670289993286133, 0.7123711109161377, 0.35340261459350586, 10.115898132324219, 3.972961902618408, 8.105499744415283, 0.06674933433532715, 0.12377548217773438, 3.777508497238159, 8.857175588607788, 72.77799248695374, 4.974562883377075]
  DFS = [0.0033583641052246094, 0.0035605430603027344, 0.023621082305908203, 0.009908676147460938, 0.028217077255249023, 0.004502058029174805, 0.02549457550048828, 0.0070688724517822266, 0.013969659805297852, 0.014708995819091797, 0.002953767776489258, 0.08820629119873047, 0.14724016189575195, 0.014338970184326172, 1.017510175704956, 1.0165448188781738, 1.1868054866790771, 11.300088167190552, 0.5553615093231201, 2.9688351154327393, 50.193803548812866, 8.066066980361938, 4.101720094680786, 0.3826935291290283, 0.6891851425170898, 0.10396122932434082, 9.206164836883545, 6.840603590011597, 0.4792969226837158, 0.13538551330566406, 0.01580357551574707, 0.043231964111328125, 19.200897455215454, 21.183071851730347, 0.44398045539855957]
  BFS = [0.0028688907623291016, 0.005109071731567383, 0.03792738914489746, 0.011859893798828125, 0.18572330474853516, 0.020787715911865234, 0.13781499862670898, 0.015564918518066406, 0.02916860580444336, 0.10313582420349121, 0.008185386657714844, 0.33101749420166016, 1.0304625034332275, 0.06317782402038574, 10.195942640304565, 2.17840576171875, 4.002807140350342, 98.34160470962524, 46.769773721694946, 33.32362461090088, 9999, 21.117067098617554, 88.87981677055359, 4.102379322052002, 2.113690137863159, 0.648916482925415, 25.968384742736816, 191.35773158073425, 13.95457673072815, 0.5420429706573486, 0.39260292053222656, 13.811448574066162, 31.95801043510437, 77.44668626785278, 13.656880378723145]

  #Filter out the levels that did not complete (time is 9999)
  #Sort the levels in order to get a usual line graph
  completedTimesIDA = sorted([time for time in IDA if time != 9999])
  levelsSolvedIDA = range(1, len(completedTimesIDA) + 1)

  completedTimesAStar = sorted([time for time in AStar if time != 9999])
  levelsSolvedAStar = range(1, len(completedTimesAStar) + 1)

  completedTimesDFS = sorted([time for time in DFS if time != 9999])
  levelsSolvedDFS = range(1, len(completedTimesDFS) + 1)

  completedTimesBFS = sorted([time for time in BFS if time != 9999])
  levelsSolvedBFS = range(1, len(completedTimesBFS) + 1)

  #Create the line graphs
  plt.figure(figsize=(10, 6))
  plt.plot(completedTimesIDA, levelsSolvedIDA, marker='s', linestyle='-', label='IDA*')
  plt.plot(completedTimesAStar, levelsSolvedAStar, marker='s', linestyle='-', label='A*')
  plt.plot(completedTimesDFS, levelsSolvedDFS, marker='s', linestyle='-', label='DFS')
  plt.plot(completedTimesBFS, levelsSolvedBFS, marker='s', linestyle='-', label='BFS')

  #Add labels and title
  plt.xlabel("Time Taken to Complete Level (seconds)")
  plt.ylabel("Total Number of Levels Solved")
  plt.title("Levels Solved Over Time")
  plt.grid(True)

  #Displays line graph names
  plt.legend()

  #Show the plot
  plt.tight_layout()
  plt.show()


def testOptimality():
  levels = list(range(1, 36)) #Levels 1 to 35
  crateDroppingLengths = [9, 16, 39, 15, 34, 19, 28, 23, 28, 35, 16, 62, 35, 22, 124, 74, 122, 45, 64, 143, 86, 68, 73, 78, 67, 43, 69, 70, 101, 18, 34, 43, 129, 134, 88]
  TSPLengths = [9, 16, 39, 15, 34, 19, 28, 23, 28, 32, 16, 60, 26, 16, 72, 72, 49, 41, 45, 81, 55, 45, 59, 71, 67, 39, 64, 62, 58, 14, 34, 41, 46, 74, 61]

  plt.figure(figsize=(10, 6))

  plt.plot(levels, crateDroppingLengths, label='Crate Dropping', marker='o')
  plt.plot(levels, TSPLengths, label='TSP', marker='x')

  plt.xlabel('Level')
  plt.ylabel('Path Length')
  plt.title('Path Length Comparison: Crate Dropping vs TSP')
  plt.legend()
  plt.grid(True)
  plt.show()

def testComplex():
  levels = list(range(36, 51)) #Levels 36 to 51

  DFSTime = [0.43169522285461426, 23.055887460708618, 1.614194393157959, 71.78867363929749, 211.26835322380066, 36.35719394683838, 16.482309103012085, 0.7257683277130127, 1.2429287433624268, 0.22667789459228516, 42.29433989524841, 264.0536878108978, 0.5614116191864014, 1.0956995487213135, 9999]
  AStarTime = [16.708687782287598, 50.066428661346436, 7.769218921661377, 18.964930534362793, 435.47929334640503, 41.690343141555786, 13.099658489227295, 0.9722468852996826, 20.201046228408813, 5.7509636878967285, 45.715317487716675, 812.828540802002, 1.890923261642456, 1.2838435173034668, 9999]

  #Filter out the levels that did not complete (time is 9999)
  #Sort the levels in order to get a usual line graph
  completedTimesDFS = sorted([time for time in DFSTime if time != 9999])
  levelsSolvedDFS = range(1, len(completedTimesDFS) + 1)

  completedTimesAStar = sorted([time for time in AStarTime if time != 9999])
  levelsSolvedAStar = range(1, len(completedTimesAStar) + 1)

  #Create the line graphs
  plt.figure(figsize=(10, 6))
  plt.plot(completedTimesDFS, levelsSolvedDFS, marker='o', linestyle='-', label='DFS')
  plt.plot(completedTimesAStar, levelsSolvedAStar, marker='s', linestyle='-', label='A*')

  #Add labels and title
  plt.xlabel("Time Taken to Complete Level (seconds)")
  plt.ylabel("Total Number of Levels Solved")
  plt.title("Levels Solved Over Time")
  plt.grid(True)

  #Displays line graph names
  plt.legend()

  #Show the plot
  plt.tight_layout()
  plt.show()

if __name__ == '__main__':
  testHeuristics()
  testLimitedTSP()
  testModel()
  testOptimality()
  testComplex()